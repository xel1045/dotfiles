#!/bin/sh

# 1. Get the last version of history
git fetch

# 2. Ensure main and develop branches are clean, i.e., there's nothing to push
if [[ $(git log origin/main..main 2> /dev/null) != "" ]]; then
	echo "Error: Your main branch have unpushed commits"
	exit 1
fi

if [[ $(git log origin/develop..develop 2> /dev/null) != "" ]]; then
	echo "Error: Your develop branch have unpushed commits"
	exit 1
fi

# 3. Pull main and develop branch to the last revision
git checkout --quiet develop
git pull --rebase --log --quiet origin develop

git checkout --quiet main
git pull --rebase --log --quiet origin main

# 4. Ensure the last commit on the develop branch is not in the main branch
if [[ $(git log main..develop 2> /dev/null) == "" ]]; then
	echo "Error: Nothing to deploy. The last commit on develop is already on main."
	exit 1
fi

# 5. Retrieve the last tagged version
LAST_TAG=$(git describe --exact-match --abbrev=0 2> /dev/null)

read -p "Version number (current $LAST_TAG)? " VERSION

if ! [[ $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
	echo "Error: Invalid version format."
	exit 1
fi

# 6. Merge develop into main
git merge --no-edit --no-ff --log develop
echo ""

# 7. Tag the last commit in main
git tag -a -m "" "$VERSION"

# 8. Ask the user to confirm the deployment, if no, revert the main branch
echo "New history:"
git --no-pager log --tags --pretty=format:"%h %d %s" --graph -5
echo ""

read -p "Confirm deployment? " YN

if ! [[ $YN =~ ^[Yy]$ ]]; then
	echo "Rolling back..."

	git tag -d "$VERSION" > /dev/null
	git reset -q --hard origin/main
	exit
fi

# 9. Push the main branch
git push --tags origin
